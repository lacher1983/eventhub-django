from django.db import models
from django.urls import reverse
from django.core.files.base import ContentFile
from PIL import Image
import io
import os
from django.conf import settings
from django.utils import timezone
from django.utils.text import slugify
from django.contrib.auth import get_user_model
from datetime import timedelta
import uuid
from django.utils.translation import gettext_lazy as _
from datetime import datetime
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.core.exceptions import ValidationError

User = get_user_model()


class Advertisement(models.Model):
    AD_TYPES = [
        ('banner', _('–ë–∞–Ω–Ω–µ—Ä')),
        ('video', _('–í–∏–¥–µ–æ')),
        ('popup', _('–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ')),
        ('sidebar', _('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å')),
    ]

    POSITIONS = [
        ('top', _('–í–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã')),
        ('sidebar', _('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å')),
        ('between_events', _('–ú–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏')),
        ('bottom', _('–ù–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')),
    ]

    title = models.CharField(max_length=200, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ"))
    ad_type = models.CharField(max_length=20, choices=AD_TYPES, default='banner', verbose_name=_("–¢–∏–ø —Ä–µ–∫–ª–∞–º—ã"))
    position = models.CharField(max_length=20, choices=POSITIONS, default='top', verbose_name=_("–ü–æ–∑–∏—Ü–∏—è"))
    image = models.ImageField(upload_to='ads/', blank=True, null=True, verbose_name=_("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"))
    video_url = models.URLField(blank=True, null=True, verbose_name="URL –≤–∏–¥–µ–æ")
    content = models.TextField(blank=True, null=True, verbose_name=_("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    link = models.URLField(verbose_name=_("–°—Å—ã–ª–∫–∞"))
    is_active = models.BooleanField(default=True, verbose_name=_("–ê–∫—Ç–∏–≤–Ω–æ"))
    start_date = models.DateTimeField(verbose_name=_("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"))
    end_date = models.DateTimeField(verbose_name=_("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"))
    click_count = models.IntegerField(default=0, verbose_name=_("–ö–ª–∏–∫–∏"))
    impression_count = models.IntegerField(default=0, verbose_name=_("–ü–æ–∫–∞–∑—ã"))
    
    class Meta:
        verbose_name = _("–†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–Ω–µ—Ä")
        verbose_name_plural = _("–†–µ–∫–ª–∞–º–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã")
        ordering = ['-start_date']
    
    def __str__(self):
        return self.title
    
    def is_currently_active(self):
        from django.utils import timezone
        now = timezone.now()
        return self.is_active and self.start_date <= now <= self.end_date
    
    def increment_click(self):
        self.click_count += 1
        self.save()
    
    def increment_impression(self):
        self.impression_count += 1
        self.save()


class Category(models.Model):
    name = models.CharField(_('–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'), max_length=100)
    slug = models.SlugField(_('—Å–ª–∞–≥'), unique=True, default='default-category')
    description = models.TextField(_('–æ–ø–∏—Å–∞–Ω–∏–µ'), blank=True)

    class Meta:
        verbose_name = _('–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
        verbose_name_plural = _('–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏–º slug –∏–∑ name
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)


class Event(models.Model):
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    EVENT_CATEGORIES = [
        ('education', _('–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ')),
        ('business', _('–ë–∏–∑–Ω–µ—Å')),
        ('entertainment', _('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')),
        ('culture', _('–ö—É–ª—å—Ç—É—Ä–∞')),
        ('sport', _('–°–ø–æ—Ä—Ç')),
        ('social', _('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ')),
    ]
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    EVENT_TYPES = [
        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ
        ('webinar', _('–í–µ–±–∏–Ω–∞—Ä')),
        ('workshop', _('–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å')),
        ('course', _('–ö—É—Ä—Å')),
        ('lecture', _('–õ–µ–∫—Ü–∏—è')),
        ('training', _('–¢—Ä–µ–Ω–∏–Ω–≥')),
        
        # –ë–∏–∑–Ω–µ—Å
        ('conference', _('–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è')),
        ('business_meeting', _('–ë–∏–∑–Ω–µ—Å-–≤—Å—Ç—Ä–µ—á–∞')),
        ('networking', _('–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥')),
        ('exhibition', _('–í—ã—Å—Ç–∞–≤–∫–∞')),
        
        # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
        ('concert', _('–ö–æ–Ω—Ü–µ—Ä—Ç')),
        ('party', _('–í–µ—á–µ—Ä–∏–Ω–∫–∞')),
        ('festival', _('–§–µ—Å—Ç–∏–≤–∞–ª—å')),
        ('show', _('–®–æ—É')),
        
        # –ö—É–ª—å—Ç—É—Ä–∞
        ('exhibition_culture', _('–í—ã—Å—Ç–∞–≤–∫–∞ (–∫—É–ª—å—Ç—É—Ä–Ω–∞—è)')),
        ('tour', _('–≠–∫—Å–∫—É—Ä—Å–∏—è')),
        ('master_class', _('–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å (—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π)')),
        
        # –°–ø–æ—Ä—Ç
        ('competition', _('–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')),
        ('sport_event', _('–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ')),
        ('tournament', _('–¢—É—Ä–Ω–∏—Ä')),
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
        ('charity', _('–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ')),
        ('volunteering', _('–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ')),
        ('community', _('–°–æ–æ–±—â–µ—Å—Ç–≤–æ')),

        # –î—Ä—É–≥–∏–µ
        ('trending', 'üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ'),
        ('new', 'üÜï –ù–æ–≤–æ–µ'),
        ('featured', '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ'),
        ('early_bird', 'üê¶ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞'),
        ('last_chance', '‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å'),
        ('sold_out', 'üî¥ –ü—Ä–æ–¥–∞–Ω–æ'),
        ('exclusive', 'üëë –≠–∫—Å–∫–ª—é–∑–∏–≤'),
        ('discount', 'üí∏ –°–∫–∏–¥–∫–∞'),
    ]

    EVENT_FORMATS = [
        ('online', _('–û–Ω–ª–∞–π–Ω')),
        ('offline', _('–û—Ñ—Ñ–ª–∞–π–Ω')),
        ('hybrid', _('–ì–∏–±—Ä–∏–¥–Ω—ã–π')),
    ]

    # –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    DIFFICULTY_LEVELS = [
        ('beginner', _('–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö')),
        ('intermediate', _('–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å')),
        ('advanced', _('–î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö')),
        ('all', _('–î–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π')),
    ]
  
    title = models.CharField(max_length=200, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
    description = models.TextField(verbose_name=_("–û–ø–∏—Å–∞–Ω–∏–µ"))
    short_description = models.CharField(max_length=300, verbose_name=_("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"), 
                                       default=_('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
    date = models.DateTimeField(verbose_name=_("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"))
    location = models.CharField(max_length=200, verbose_name=_("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"))
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True,
        verbose_name=_("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"), default='education')
    event_type = models.CharField(max_length=20, choices=EVENT_TYPES, verbose_name=_("–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), default='workshop')
    event_format = models.CharField(max_length=10, choices=EVENT_FORMATS, verbose_name=_("–§–æ—Ä–º–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"), default='offline')
    
    # –ü–æ–ª—è –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    difficulty_level = models.CharField(
        max_length=20, 
        choices=DIFFICULTY_LEVELS, 
        default='all',
        verbose_name=_("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    )
    requirements = models.TextField(blank=True, verbose_name=_("–ß—Ç–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π"))
    image = models.ImageField(upload_to='events/', blank=True, null=True)
    organizer = models.ForeignKey('accounts.User', on_delete=models.CASCADE, related_name='organized_events', 
                                verbose_name=_("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä"))
    price = models.DecimalField(max_digits=10, decimal_places=2, 
                              default=0, verbose_name=_("–¶–µ–Ω–∞"))
    is_free = models.BooleanField(default=False, verbose_name=_("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"))
    tickets_available = models.PositiveIntegerField(default=100, verbose_name=_("–î–æ—Å—Ç—É–ø–Ω–æ –±–∏–ª–µ—Ç–æ–≤"))
    capacity = models.PositiveIntegerField(verbose_name=_("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"), default=50)
    is_active = models.BooleanField(default=True, verbose_name=_("–ê–∫—Ç–∏–≤–Ω–æ"))
    created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True, verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"))
    updated_at = models.DateTimeField(auto_now=True, null=True, blank=True, verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
    average_rating = models.DecimalField(max_digits=3, decimal_places=2, default=0, blank=True, verbose_name=_("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥"))
    # –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Ä—Ç—ã
    latitude = models.FloatField('–®–∏—Ä–æ—Ç–∞', null=True, blank=True)
    longitude = models.FloatField('–î–æ–ª–≥–æ—Ç–∞', null=True, blank=True)
    
    # –¢–µ–≥–∏
    tags = models.ManyToManyField('Tag', blank=True, verbose_name=_("–¢–µ–≥–∏"))

    badges = models.JSONField(default=list, blank=True, verbose_name="–ë–µ–π–¥–∂–∏")

    class Meta:
        verbose_name = _("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        verbose_name_plural = _("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        ordering = ['-date']
    
    def update_average_rating(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        from django.db.models import Avg
        avg_rating = self.reviews.aggregate(Avg('rating'))['rating__avg']
        self.average_rating = avg_rating or 0
        self.save(update_fields=['average_rating'])
    
    def get_user_review(self, user):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return self.reviews.get(user=user)
        except Review.DoesNotExist:
            return None
        
    def get_absolute_url(self):
        return reverse('event_detail', kwargs={'pk': self.pk})

    def get_image_url(self):
        if self.image and hasattr(self.image, 'url'):
            try:
                if os.path.exists(self.image.path):
                    return self.image.url
            except:
                pass
        return f"{settings.STATIC_URL}images/default-event.jpg"

    def save(self, *args, **kwargs):
        # –°–æ–∑–¥–∞–Ω–∏–µ default –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç
        if not self.image:
            try:
                img = Image.new('RGB', (300, 200), color='#f0f0f0')
                img_io = io.BytesIO()
                img.save(img_io, format='JPEG')
                self.image.save('default_event.jpg', ContentFile(img_io.getvalue()), save=False)
            except:
                pass
    
       # –†–µ—Å–∞–π–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        super().save(*args, **kwargs)
        if self.image:
            try:
                img = Image.open(self.image.path)
                if img.height > 600 or img.width > 800:
                    output_size = (800, 600)
                    img.thumbnail(output_size)
                    img.save(self.image.path)
            except:
                pass

    def __str__(self):
        return self.title
    
    @property
    def is_free_event(self):
        return self.price <= 0 or self.is_free
    
    @property
    def get_category_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return dict(self.EVENT_CATEGORIES).get(self.category, self.category)
    
    @property
    def get_type_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞"""
        return dict(self.EVENT_TYPES).get(self.event_type, self.event_type)
    
    @property
    def get_difficulty_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        return dict(self.DIFFICULTY_LEVELS).get(self.difficulty_level, self.difficulty_level)
    
    def get_similar_events(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–∏–ø—É)"""
        from django.db.models import Q
        return Event.objects.filter(
            Q(category=self.category) | Q(event_type=self.event_type),
            is_active=True
        ).exclude(pk=self.pk).distinct()[:6]
    
    # –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤
    def is_ticket_available(self, quantity=1):
        return self.tickets_available >= quantity
    
    # –ú–µ—Ç–æ–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
    def reserve_tickets(self, quantity=1):
        if self.is_ticket_available(quantity):
            self.tickets_available -= quantity
            self.save()
            return True
        return False    

    def get_active_badges(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–µ–π–¥–∂–µ–π"""
        active_badges = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–µ–π–¥–∂–∞
        if self.registrations.count() > self.capacity * 0.8:
            active_badges.append('trending')
        
        if self.created_at and (timezone.now() - self.created_at).days < 7:
            active_badges.append('new')
        
        if self.average_rating >= 4.5:
            active_badges.append('featured')
        
        if self.date and (self.date - timezone.now()).days <= 3:
            active_badges.append('last_chance')
        
        if self.registrations.count() >= self.capacity:
            active_badges.append('sold_out')
        
        if self.price == 0:
            active_badges.append('free')
        
        if self.event_format == 'online':
            active_badges.append('online')
        else:
            active_badges.append('offline')
        
        return active_badges
    

    @property
    def has_coordinates(self):
        return self.latitude is not None and self.longitude is not None


class Tag(models.Model):
    name = models.CharField(max_length=50, unique=True, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞"))
    slug = models.SlugField(unique=True)
    color = models.CharField(max_length=7, default='#007bff', verbose_name=_("–¶–≤–µ—Ç —Ç–µ–≥–∞"))  # HEX —Ü–≤–µ—Ç
    
    class Meta:
        verbose_name = _("–¢–µ–≥")
        verbose_name_plural = _("–¢–µ–≥–∏")
        ordering = ['name']
    
    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            from django.utils.text import slugify
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)


class Registration(models.Model):
    STATUS_CHOICES = [
        ('pending', _('–û–∂–∏–¥–∞–µ—Ç')),
        ('confirmed', _('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')),
        ('cancelled', _('–û—Ç–º–µ–Ω–µ–Ω–∞')),
    ]
    user = models.ForeignKey('accounts.User', on_delete=models.CASCADE, related_name='registrations')
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='registrations')
    registration_date = models.DateTimeField(auto_now_add=True) 
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')

    notes = models.TextField(
        _('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏'),
        blank=True,
        null=True,
        help_text=_('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    )

    class Meta:
        unique_together = ['user', 'event']
        ordering = ['-registration_date']
        verbose_name = _("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        verbose_name_plural = _("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    def __str__(self):
        return f"{self.user.username} - {self.event.title}"

User = get_user_model()


class Favorite(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='favorites', verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='favorited_by', verbose_name=_("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"))
    created_at = models.DateTimeField(auto_now_add=True)
    notes = models.TextField(blank=True)  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    registration_date = models.DateTimeField(auto_now_add=True, null=True, blank=True, verbose_name=_("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"))

    class Meta:
        unique_together = ['user', 'event']  # –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        verbose_name = _("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        verbose_name_plural = _("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        ordering = ['-registration_date', '-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.event.title}"


class Review(models.Model):
    """–ú–æ–¥–µ–ª—å –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    RATING_CHOICES = [
        (1, _('‚≠ê - –£–∂–∞—Å–Ω–æ')),
        (2, _('‚≠ê‚≠ê - –ü–ª–æ—Ö–æ')),
        (3, _('‚≠ê‚≠ê‚≠ê - –ù–æ—Ä–º–∞–ª—å–Ω–æ')),
        (4, _('‚≠ê‚≠ê‚≠ê‚≠ê - –•–æ—Ä–æ—à–æ')),
        (5, _('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - –û—Ç–ª–∏—á–Ω–æ')),
    ]
    
    event = models.ForeignKey(
        Event,
        on_delete=models.CASCADE,
        related_name='reviews',
        verbose_name=_("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    )
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='reviews',
        verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    )
    rating = models.IntegerField(
        choices=RATING_CHOICES,
        verbose_name=_("–†–µ–π—Ç–∏–Ω–≥")
    )
    comment = models.TextField(
        max_length=1000,
        blank=True,
        verbose_name=_("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    )
    registration_date = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name=_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    )

    class Meta:
        verbose_name = _("–û—Ç–∑—ã–≤")
        verbose_name_plural = _("–û—Ç–∑—ã–≤—ã")
        unique_together = ['event', 'user']  # –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
        ordering = ['-registration_date']

    def __str__(self):
        return f"{self.user.username} - {self.event.title} ({self.rating}‚≠ê)"
    

# –º–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–µ–º—Å—è
class Partner(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    promo_code = models.CharField(max_length=20, unique=True)
    commission = models.DecimalField(max_digits=5, decimal_places=2)


# –ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è 
class Promotion(models.Model):
    PROMO_TYPES = [
        ('top', _('–ù–∞ –≤–µ—Ä—à–∏–Ω–µ —Å–ø–∏—Å–∫–∞')),
        ('highlight', _('–ü–æ–¥—Å–≤–µ—Ç–∫–∞')),
        ('email', _('Email —Ä–∞—Å—Å—ã–ª–∫–∞'))
    ]
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    promo_type = models.CharField(max_length=20, choices=PROMO_TYPES)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()

from django.db import models
from decimal import Decimal


class Cart(models.Model):
    user = models.OneToOneField('accounts.User', on_delete=models.CASCADE, related_name='cart')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.username}"

    @property
    def items_count(self):
        return self.items.count()

    @property
    def total_price(self):
        total = 0
        for item in self.items.all():
            total += item.total_price
        return total


class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items')
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    added_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = [['cart', 'event']]  # –û–¥–∏–Ω —Ç–æ–≤–∞—Ä - –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –∫–æ—Ä–∑–∏–Ω–µ

    @property
    def total_price(self):
        return self.quantity * self.price

    def __str__(self):
        return f"{self.quantity} x {self.event.title}"

    def save(self, *args, **kwargs):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –∏–∑ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if not self.price and self.event:
            self.price = self.event.price
        super().save(*args, **kwargs)


class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', _('–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã')),
        ('paid', _('–û–ø–ª–∞—á–µ–Ω–æ')),
        ('cancelled', _('–û—Ç–º–µ–Ω–µ–Ω–æ')),
        ('refunded', _('–í–æ–∑–≤—Ä–∞—Ç')),
    ]

    PAYMENT_METHODS = [
        ('card', _('–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞')),
        ('paypal', _('PayPal')),
        ('qiwi', _('QIWI')),
        ('yoomoney', _('–ÆMoney')),
    ]

    user = models.ForeignKey('accounts.User', on_delete=models.CASCADE)
    order_number = models.CharField(max_length=20, unique=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    payment_method = models.CharField(max_length=10, choices=PAYMENT_METHODS)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    payment_date = models.DateTimeField(null=True, blank=True)
    stripe_payment_intent_id = models.CharField(max_length=100, blank=True)

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ #{self.order_number} - {self.user.username}"

    def save(self, *args, **kwargs):
        if not self.order_number:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            self.order_number = self.generate_order_number()
        super().save(*args, **kwargs)

    def generate_order_number(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        import random
        import string
        from django.utils import timezone
        
        # –§–æ—Ä–º–∞—Ç: ORDER-–ì–ì–ú–ú–î–î-XXXXX
        date_part = timezone.now().strftime('%y%m%d')
        random_part = ''.join(random.choices(string.digits, k=5))
        order_number = f"ORDER-{date_part}-{random_part}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        while Order.objects.filter(order_number=order_number).exists():
            random_part = ''.join(random.choices(string.digits, k=5))
            order_number = f"ORDER-{date_part}-{random_part}"
        
        return order_number


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.quantity} x {self.event.title}"

    @property
    def total_price(self):
        return self.price * self.quantity
    

User = get_user_model()


class EmailConfirmation(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    confirmation_code = models.UUIDField(default=uuid.uuid4, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    confirmed = models.BooleanField(default=False)

    def is_expired(self):
        return timezone.now() > self.created_at + timedelta(hours=24)

    def __str__(self):
        return f"Confirmation for {self.user.email}"


# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class Subscription(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    categories = models.ManyToManyField(Category, blank=True)
    subscribed_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"Subscription: {self.user.username}"


class Notification(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    sent_at = models.DateTimeField(auto_now_add=True)
    read = models.BooleanField(default=False)

    class Meta:
        unique_together = ['user', 'event']


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
class EventStatistic(models.Model):
    event = models.OneToOneField(Event, on_delete=models.CASCADE)
    views_count = models.PositiveIntegerField(default=0)
    registrations_count = models.PositiveIntegerField(default=0)
    favorites_count = models.PositiveIntegerField(default=0)
    last_updated = models.DateTimeField(auto_now=True)


class PlatformStatistic(models.Model):
    date = models.DateField(unique=True)
    total_users = models.PositiveIntegerField(default=0)
    total_events = models.PositiveIntegerField(default=0)
    total_registrations = models.PositiveIntegerField(default=0)
    active_users = models.PositiveIntegerField(default=0)


class ExternalEventSource(models.Model):
    """–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    name = models.CharField(max_length=100, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"))
    url = models.URLField(verbose_name=_("URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞"))
    parser_config = models.JSONField(default=dict, verbose_name=_("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"))
    is_active = models.BooleanField(default=True, verbose_name=_("–ê–∫—Ç–∏–≤–µ–Ω"))
    last_sync = models.DateTimeField(null=True, blank=True, verbose_name=_("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"))
    
    class Meta:
        verbose_name = _("–ò—Å—Ç–æ—á–Ω–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        verbose_name_plural = _("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    
    def __str__(self):
        return self.name


class ExternalEvent(models.Model):
    """–í–Ω–µ—à–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    source = models.ForeignKey(ExternalEventSource, on_delete=models.CASCADE, verbose_name=_("–ò—Å—Ç–æ—á–Ω–∏–∫"))
    external_id = models.CharField(max_length=100, verbose_name=_("–í–Ω–µ—à–Ω–∏–π ID"))
    title = models.CharField(max_length=200, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ"))
    description = models.TextField(verbose_name=_("–û–ø–∏—Å–∞–Ω–∏–µ"))
    short_description = models.CharField(max_length=300, verbose_name=_("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"))
    date = models.DateTimeField(verbose_name=_("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"))
    location = models.CharField(max_length=200, verbose_name=_("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"))
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name=_("–¶–µ–Ω–∞"))
    is_free = models.BooleanField(default=False, verbose_name=_("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ"))
    image_url = models.URLField(blank=True, null=True, verbose_name=_("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"))
    external_url = models.URLField(verbose_name=_("URL –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —Å–∞–π—Ç–µ"))
    category = models.CharField(max_length=50, verbose_name=_("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"))
    is_archived = models.BooleanField(default=False, verbose_name=_("–í –∞—Ä—Ö–∏–≤–µ"))
    raw_data = models.JSONField(default=dict, verbose_name=_("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"))
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = _("–í–Ω–µ—à–Ω–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        verbose_name_plural = _("–í–Ω–µ—à–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        unique_together = ['source', 'external_id']
        ordering = ['-date']
    
    def __str__(self):
        return f"{self.title} ({self.source.name})"
    
    @property
    def is_past_event(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
        return self.date < timezone.now()
    
    def archive(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –∞—Ä—Ö–∏–≤"""
        self.is_archived = True
        self.save()


class TravelBuddyGroup(models.Model):
    """–ì—Ä—É–ø–ø–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='buddy_groups')
    creator = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_groups')
    name = models.CharField(max_length=200, verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã'))
    description = models.TextField(verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã'))
    max_members = models.PositiveIntegerField(default=10, verbose_name=_('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
    is_active = models.BooleanField(default=True, verbose_name=_('–ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞'))
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = _('–ì—Ä—É–ø–ø–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤')
        verbose_name_plural = _('–ì—Ä—É–ø–ø—ã –ø–æ–ø—É—Ç—á–∏–∫–æ–≤')

    def __str__(self):
        return f"{self.name} - {self.event.title}"

    def current_members_count(self):
        return self.members.count()

    def available_slots(self):
        return self.max_members - self.current_members_count()

    def is_full(self):
        return self.current_members_count() >= self.max_members

class TravelBuddyMembership(models.Model):
    """–£—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã –ø–æ–ø—É—Ç—á–∏–∫–æ–≤"""
    group = models.ForeignKey(TravelBuddyGroup, on_delete=models.CASCADE, related_name='members')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='buddy_memberships')
    joined_at = models.DateTimeField(auto_now_add=True)
    is_approved = models.BooleanField(default=True, verbose_name=_('–£—Ç–≤–µ—Ä–∂–¥–µ–Ω'))

    class Meta:
        verbose_name = _('–£—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã')
        verbose_name_plural = _('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø')
        unique_together = ['group', 'user']

class TravelBuddyMessage(models.Model):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –≥—Ä—É–ø–ø—ã"""
    group = models.ForeignKey(TravelBuddyGroup, on_delete=models.CASCADE, related_name='messages')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='buddy_messages')
    message = models.TextField(verbose_name=_('–°–æ–æ–±—â–µ–Ω–∏–µ'))
    created_at = models.DateTimeField(auto_now_add=True)
    is_system_message = models.BooleanField(default=False, verbose_name=_('–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'))

    class Meta:
        verbose_name = _('–°–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã')
        verbose_name_plural = _('–°–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø')
        ordering = ['created_at']

    def __str__(self):
        return f"{self.user.username}: {self.message[:50]}"

# class BuddyRequest(models.Model):
#     GENDER_CHOICES = [
#         ('any', '–õ—é–±–æ–π'),
#         ('male', '–ú—É–∂—Å–∫–æ–π'),
#         ('female', '–ñ–µ–Ω—Å–∫–∏–π'),
#         ('individual', _('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–ø—É—Ç—á–∏–∫')),
#         ('group', _('–ì—Ä—É–ø–ø–∞')),
#         ('any', _('–õ—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç')),
#     ]   

#     REQUEST_TYPES = [
#         ('travel', '–ü–æ–ø—É—Ç—á–∏–∫ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏'),
#         ('accommodation', '–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'),
#         ('both', '–ü–æ–ø—É—Ç—á–∏–∫ –∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'),
#     ]

#     STATUS_CHOICES = [
#         ('active', '–ê–∫—Ç–∏–≤–Ω—ã–π'),
#         ('fulfilled', '–ù–∞–π–¥–µ–Ω –ø–æ–ø—É—Ç—á–∏–∫'),
#         ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω'),
#     ]

#     event = models.ForeignKey(Event, on_delete=models.CASCADE, verbose_name=_('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'))
#     user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=_('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
#     message = models.TextField(verbose_name=_('–°–æ–æ–±—â–µ–Ω–∏–µ'), blank=True)
#     request_type = models.CharField(max_length=20, choices=REQUEST_TYPES, default='travel', verbose_name=_('–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞'))
#     description = models.TextField(verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞'))
#     max_group_size = models.PositiveIntegerField(default=1, verbose_name=_('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã'))
#     is_active = models.BooleanField(default=True, verbose_name=_('–ê–∫—Ç–∏–≤–µ–Ω'))
#     created_at = models.DateTimeField(auto_now_add=True, verbose_name=_('–°–æ–∑–¥–∞–Ω'))
#     preferred_gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='any', verbose_name=_('–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª'))
#     max_buddies = models.PositiveIntegerField(default=1, verbose_name=_('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤'))
#     updated_at = models.DateTimeField(auto_now=True, verbose_name=_('–û–±–Ω–æ–≤–ª–µ–Ω'))
#     status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='active', verbose_name=_('–°—Ç–∞—Ç—É—Å'))
    
#     class Meta:
#         verbose_name = _('–ó–∞–ø—Ä–æ—Å –ø–æ–ø—É—Ç—á–∏–∫–∞')
#         verbose_name_plural = _('–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ø—É—Ç—á–∏–∫–æ–≤')
#         ordering = ['-created_at']
    
#     def __str__(self):
#         return f"{self.user.username} - {self.event.title}"

User = get_user_model()

class ChatSession(models.Model):
    """–°–µ—Å—Å–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='chat_sessions')
    session_id = models.UUIDField(default=uuid.uuid4, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)
    context = models.JSONField(default=dict, blank=True)  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    
    class Meta:
        verbose_name = '–°–µ—Å—Å–∏—è —á–∞—Ç–∞'
        verbose_name_plural = '–°–µ—Å—Å–∏–∏ —á–∞—Ç–∞'
        ordering = ['-created_at']
    
    def __str__(self):
        return f"–ß–∞—Ç {self.user.username} - {self.created_at.strftime('%d.%m.%Y %H:%M')}"

class ChatMessage(models.Model):
    """–°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    MESSAGE_TYPES = [
        ('user', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
        ('assistant', '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'),
        ('system', '–°–∏—Å—Ç–µ–º–∞'),
    ]
    
    session = models.ForeignKey(ChatSession, on_delete=models.CASCADE, related_name='messages')
    message_type = models.CharField(max_length=10, choices=MESSAGE_TYPES)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    metadata = models.JSONField(default=dict, blank=True)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    class Meta:
        verbose_name = '–°–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞'
        verbose_name_plural = '–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞'
        ordering = ['timestamp']
    
    def __str__(self):
        return f"{self.get_message_type_display()}: {self.content[:50]}..."

class ChatIntent(models.Model):
    """–ò–Ω—Ç–µ–Ω—Ç—ã (–Ω–∞–º–µ—Ä–µ–Ω–∏—è) –¥–ª—è NLP"""
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    patterns = models.JSONField(default=list)  # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ—Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞
    responses = models.JSONField(default=list)  # –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    action = models.CharField(max_length=200, blank=True)  # –î–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'search_events')
    required_entities = models.JSONField(default=list)  # –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    is_active = models.BooleanField(default=True)
    
    class Meta:
        verbose_name = '–ò–Ω—Ç–µ–Ω—Ç —á–∞—Ç–∞'
        verbose_name_plural = '–ò–Ω—Ç–µ–Ω—Ç—ã —á–∞—Ç–∞'
    
    def __str__(self):
        return self.name

class ChatEntity(models.Model):
    """–°—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    name = models.CharField(max_length=50, unique=True)
    patterns = models.JSONField(default=list)  # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    examples = models.JSONField(default=list)  # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
    
    class Meta:
        verbose_name = '–°—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞'
        verbose_name_plural = '–°—É—â–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞'
    
    def __str__(self):
        return self.name
    

# –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
class Achievement(models.Model):
    """–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    ACHIEVEMENT_TYPES = [
        ('event', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'),
        ('social', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ'),
        ('exploration', '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'),
        ('mastery', '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ'),
        ('special', '–û—Å–æ–±—ã–µ'),
    ]
    
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField()
    achievement_type = models.CharField(max_length=20, choices=ACHIEVEMENT_TYPES)
    icon = models.CharField(max_length=50, default='üèÜ')  # Emoji –∏–ª–∏ –∫–ª–∞—Å—Å –∏–∫–æ–Ω–∫–∏
    points = models.PositiveIntegerField(default=10)
    requirement = models.JSONField(default=dict)  # –£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'
        verbose_name_plural = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
        ordering = ['points', 'name']
    
    def __str__(self):
        return f"{self.icon} {self.name}"

class UserAchievement(models.Model):
    """–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='achievements')
    achievement = models.ForeignKey(Achievement, on_delete=models.CASCADE)
    unlocked_at = models.DateTimeField(auto_now_add=True)
    progress = models.FloatField(default=0.0)
    is_unlocked = models.BooleanField(default=False)
    
    class Meta:
        verbose_name = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        unique_together = ['user', 'achievement']
        ordering = ['-unlocked_at']
    
    def __str__(self):
        status = "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" if self.is_unlocked else f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {self.progress*100}%"
        return f"{self.user.username} - {self.achievement.name} ({status})"

class LevelSystem(models.Model):
    """–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    level = models.PositiveIntegerField(unique=True)
    level_name = models.CharField(max_length=50)
    min_points = models.PositiveIntegerField()
    max_points = models.PositiveIntegerField()
    badge_icon = models.CharField(max_length=50, default='‚≠ê')
    color = models.CharField(max_length=7, default='#667eea')
    benefits = models.JSONField(default=list)
    
    class Meta:
        verbose_name = '–£—Ä–æ–≤–µ–Ω—å —Å–∏—Å—Ç–µ–º—ã'
        verbose_name_plural = '–£—Ä–æ–≤–Ω–∏ —Å–∏—Å—Ç–µ–º—ã'
        ordering = ['level']
    
    def __str__(self):
        return f"–£—Ä–æ–≤–µ–Ω—å {self.level}: {self.level_name}"

class UserProfile(models.Model):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='game_profile')
    total_points = models.PositiveIntegerField(default=0)
    current_level = models.ForeignKey(LevelSystem, on_delete=models.SET_NULL, null=True, blank=True)
    streak_days = models.PositiveIntegerField(default=0)  # –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    last_activity = models.DateTimeField(auto_now=True)
    badges = models.JSONField(default=list)  # –°–ø–∏—Å–æ–∫ –±–µ–π–¥–∂–µ–π
    stats = models.JSONField(default=dict)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    class Meta:
        verbose_name = '–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
        verbose_name_plural = '–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏'
    
    def __str__(self):
        return f"–ü—Ä–æ—Ñ–∏–ª—å {self.user.username} (–£—Ä–æ–≤–µ–Ω—å {self.current_level.level if self.current_level else 0})"
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from .models import Event, Registration, Review, Favorite
        
        self.stats = {
            'events_created': self.user.organized_events.count(),
            'events_attended': Registration.objects.filter(user=self.user).count(),
            'reviews_written': Review.objects.filter(user=self.user).count(),
            'favorites_added': Favorite.objects.filter(user=self.user).count(),
            'days_active': self._calculate_active_days(),
            'categories_explored': self._calculate_categories_explored(),
        }
        self.save()
    
    def _calculate_active_days(self):
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π"""
        from datetime import timedelta
        thirty_days_ago = timezone.now() - timedelta(days=30)
        activities = Registration.objects.filter(
            user=self.user,
            registration_date__gte=thirty_days_ago
        ).dates('registration_date', 'day').distinct()
        return len(activities)
    
    def _calculate_categories_explored(self):
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        from .models import Registration
        categories = Registration.objects.filter(
            user=self.user
        ).values_list('event__category__name', flat=True).distinct()
        return len([cat for cat in categories if cat])

class Leaderboard(models.Model):
    """–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='leaderboard_position')
    position = models.PositiveIntegerField()
    points = models.PositiveIntegerField()
    last_updated = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = '–ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤'
        verbose_name_plural = '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤'
        ordering = ['position']
    
    def __str__(self):
        return f"#{self.position} {self.user.username} ({self.points} –æ—á–∫–æ–≤)"

class Quest(models.Model):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    QUEST_TYPES = [
        ('daily', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ'),
        ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ'),
        ('monthly', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ'),
        ('special', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ'),
    ]
    
    name = models.CharField(max_length=100)
    description = models.TextField()
    quest_type = models.CharField(max_length=10, choices=QUEST_TYPES)
    points_reward = models.PositiveIntegerField()
    requirement = models.JSONField(default=dict)  # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    is_active = models.BooleanField(default=True)
    expires_at = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = '–ó–∞–¥–∞–Ω–∏–µ'
        verbose_name_plural = '–ó–∞–¥–∞–Ω–∏—è'
        ordering = ['quest_type', 'points_reward']
    
    def __str__(self):
        return f"{self.name} ({self.get_quest_type_display()})"

class UserQuest(models.Model):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞–Ω–∏—è–º"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='quests')
    quest = models.ForeignKey(Quest, on_delete=models.CASCADE)
    progress = models.FloatField(default=0.0)
    is_completed = models.BooleanField(default=False)
    completed_at = models.DateTimeField(null=True, blank=True)
    started_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = '–ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ó–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        unique_together = ['user', 'quest']
    
    def __str__(self):
        status = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if self.is_completed else f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {self.progress*100}%"
        return f"{self.user.username} - {self.quest.name} ({status})"