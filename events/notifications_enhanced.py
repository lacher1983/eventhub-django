from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone
from .telegram_bot import TelegramNotifier
import logging
from datetime import timedelta
from .models import Notification, User

logger = logging.getLogger(__name__)

class EnhancedNotificationService:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.telegram_notifier = TelegramNotifier()
        self.notification_templates = self._load_templates()
    
    def _load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            'registration': {
                'email_subject': 'üéüÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ {event_title}',
                'telegram_template': 'üéä –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n{event_title}\nüìÖ {event_date}',
                'push_template': '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {event_title}'
            },
            'reminder_24h': {
                'email_subject': '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event_title} —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!',
                'telegram_template': 'üîî –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞: {event_title}',
                'push_template': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event_title} –∑–∞–≤—Ç—Ä–∞'
            },
            'reminder_1h': {
                'email_subject': 'üîî –°–∫–æ—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: {event_title}',
                'telegram_template': 'üöÄ –ß–µ—Ä–µ–∑ 1 —á–∞—Å: {event_title}',
                'push_template': '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å'
            },
            'weather_alert': {
                'email_subject': 'üå§Ô∏è –ü–æ–≥–æ–¥–∞ –¥–ª—è {event_title}',
                'telegram_template': 'üå§Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {weather_info}',
                'push_template': '–ü–æ–≥–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
            },
            'buddy_match': {
                'email_subject': 'üë• –ù–∞–π–¥–µ–Ω –ø–æ–ø—É—Ç—á–∏–∫ –¥–ª—è {event_title}',
                'telegram_template': 'üë• –ù–∞–π–¥–µ–Ω –ø–æ–ø—É—Ç—á–∏–∫!\n{event_title}',
                'push_template': '–ù–∞–π–¥–µ–Ω –ø–æ–ø—É—Ç—á–∏–∫ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
            }
        }
    
    def send_personalized_notification(self, user, event, notification_type, context=None):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = context or {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        preferred_channels = self._get_user_notification_preferences(user)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        personalized_context = self._personalize_content(user, event, notification_type, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        for channel in preferred_channels:
            try:
                if channel == 'email' and user.email:
                    self._send_personalized_email(user, event, notification_type, personalized_context)
                
                elif channel == 'telegram':
                    self._send_personalized_telegram(user, event, notification_type, personalized_context)
                
                elif channel == 'push':
                    self._send_internal_notification(user, event, notification_type, personalized_context)
                    
            except Exception as e:
                logger.error(f"Failed to send {channel} notification to {user.username}: {e}")
    
    def _get_user_notification_preferences(self, user):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã —Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        default_preferences = ['email', 'internal']
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –≤ Telegram, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if hasattr(user, 'telegram_chat_id') and user.telegram_chat_id:
            default_preferences.append('telegram')
        
        return default_preferences
    
    def _personalize_content(self, user, event, notification_type, context):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        personalized = context.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        personalized['user_name'] = user.first_name or user.username
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_type == 'reminder_24h':
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            personalized['personal_tips'] = self._get_personal_event_tips(user, event)
        
        elif notification_type == 'weather_alert':
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            personalized['weather_recommendations'] = self._get_weather_recommendations(
                context.get('weather_data', {})
            )
        
        return personalized
    
    def _get_personal_event_tips(self, user, event):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        tips = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        past_events = Registration.objects.filter(
            user=user,
            event__category=event.category
        ).select_related('event')[:3]
        
        if past_events:
            tips.append(f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞ –≤ {event.category.name}")
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤
        user_reviews = Review.objects.filter(user=user)
        if user_reviews.exists():
            avg_rating = user_reviews.aggregate(Avg('rating'))['rating__avg']
            if avg_rating and avg_rating < 3:
                tips.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –≤—ã–±–∏—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        
        return tips
    
    def send_bulk_smart_notifications(self, users, event, notification_type):
        """–£–º–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        optimal_times = self._calculate_optimal_send_times(users)
        
        for user in users:
            optimal_time = optimal_times.get(user.id, timezone.now())
            
            # –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º, –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            if optimal_time > timezone.now():
                self._schedule_notification(user, event, notification_type, optimal_time)
            else:
                self.send_personalized_notification(user, event, notification_type)
    
    def _calculate_optimal_send_times(self, users):
        """–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        optimal_times = {}
        
        for user in users:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_activity = self._analyze_user_activity_pattern(user)
            optimal_time = user_activity.get('best_notification_time', timezone.now())
            optimal_times[user.id] = optimal_time
        
        return optimal_times
    
    def _analyze_user_activity_pattern(self, user):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        recent_activities = []
        
        # –õ–æ–≥–∏–Ω—ã
        if user.last_login:
            recent_activities.append(user.last_login.hour)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        recent_registrations = Registration.objects.filter(
            user=user,
            registration_date__gte=timezone.now() - timedelta(days=30)
        )
        for reg in recent_registrations:
            recent_activities.append(reg.registration_date.hour)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
        if recent_activities:
            best_hour = max(set(recent_activities), key=recent_activities.count)
            optimal_time = timezone.now().replace(
                hour=best_hour, minute=0, second=0, microsecond=0
            )
            
            # –ï—Å–ª–∏ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if optimal_time < timezone.now():
                optimal_time += timedelta(days=1)
        else:
            # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è - 10 —É—Ç—Ä–∞
            optimal_time = timezone.now().replace(hour=10, minute=0, second=0, microsecond=0)
            if optimal_time < timezone.now():
                optimal_time += timedelta(days=1)
        
        return {'best_notification_time': optimal_time}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
enhanced_notification_service = EnhancedNotificationService()