from django.core.management.base import BaseCommand
from events.models import Achievement, LevelSystem, Quest
from django.utils import timezone
from datetime import timedelta

class Command(BaseCommand):
    help = 'Initialize gamification system with default data'
    
    def handle(self, *args, **options):
        self.stdout.write('üéÆ Initializing gamification system...')
        
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏
        levels_data = [
            {'level': 1, 'level_name': '–ù–æ–≤–∏—á–æ–∫', 'min_points': 0, 'max_points': 50, 'badge_icon': 'üå±', 'color': '#95a5a6'},
            {'level': 2, 'level_name': '–≠–Ω—Ç—É–∑–∏–∞—Å—Ç', 'min_points': 51, 'max_points': 150, 'badge_icon': '‚≠ê', 'color': '#3498db'},
            {'level': 3, 'level_name': '–ó–Ω–∞—Ç–æ–∫', 'min_points': 151, 'max_points': 300, 'badge_icon': 'üèÖ', 'color': '#9b59b6'},
            {'level': 4, 'level_name': '–≠–∫—Å–ø–µ—Ä—Ç', 'min_points': 301, 'max_points': 500, 'badge_icon': 'üëë', 'color': '#e74c3c'},
            {'level': 5, 'level_name': '–õ–µ–≥–µ–Ω–¥–∞', 'min_points': 501, 'max_points': 1000, 'badge_icon': 'üí´', 'color': '#f1c40f'},
        ]
        
        for level_data in levels_data:
            LevelSystem.objects.get_or_create(
                level=level_data['level'],
                defaults=level_data
            )
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_data = [
            {
                'name': '–ü–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                'description': '–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                'achievement_type': 'event',
                'icon': 'üé™',
                'points': 10,
                'requirement': {'events_created': 1}
            },
            {
                'name': '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
                'description': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ 10 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                'achievement_type': 'social',
                'icon': 'ü¶ã',
                'points': 25,
                'requirement': {'events_attended': 10}
            },
            {
                'name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                'description': '–ü–æ—Å–µ—Ç–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è 5 —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                'achievement_type': 'exploration',
                'icon': 'üß≠',
                'points': 30,
                'requirement': {'categories_explored': 5}
            },
            {
                'name': '–ö—Ä–∏—Ç–∏–∫',
                'description': '–ù–∞–ø–∏—à–∏—Ç–µ 5 –æ—Ç–∑—ã–≤–æ–≤ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö',
                'achievement_type': 'mastery',
                'icon': 'üìù',
                'points': 20,
                'requirement': {'reviews_written': 5}
            },
            {
                'name': '–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–∏',
                'description': '–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                'achievement_type': 'special',
                'icon': 'üî•',
                'points': 50,
                'requirement': {'streak_days': 7}
            },
            {
                'name': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
                'description': '–°–æ–∑–¥–∞–π—Ç–µ 5 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                'achievement_type': 'event',
                'icon': 'üéØ',
                'points': 40,
                'requirement': {'events_created': 5}
            },
            {
                'name': '–í–µ—Ç–µ—Ä–∞–Ω',
                'description': '–ü–æ—Å–µ—Ç–∏—Ç–µ 25 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                'achievement_type': 'social',
                'icon': 'üéñÔ∏è',
                'points': 75,
                'requirement': {'events_attended': 25}
            }
        ]
        
        for ach_data in achievements_data:
            Achievement.objects.get_or_create(
                name=ach_data['name'],
                defaults=ach_data
            )
        
        # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        tomorrow = timezone.now() + timedelta(days=1)
        daily_quests = [
            {
                'name': '–ü–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–Ω—è',
                'description': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è',
                'quest_type': 'daily',
                'points_reward': 5,
                'requirement': {'action_type': 'event_registration', 'target_count': 1},
                'expires_at': tomorrow.replace(hour=0, minute=0, second=0, microsecond=0)
            },
            {
                'name': '–ê–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                'description': '–ü–æ—Å–µ—Ç–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ 2 —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                'quest_type': 'daily',
                'points_reward': 10,
                'requirement': {'action_type': 'category_exploration', 'target_count': 2},
                'expires_at': tomorrow.replace(hour=0, minute=0, second=0, microsecond=0)
            }
        ]
        
        for quest_data in daily_quests:
            Quest.objects.get_or_create(
                name=quest_data['name'],
                quest_type='daily',
                defaults=quest_data
            )
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Gamification system initialized successfully!')
        )