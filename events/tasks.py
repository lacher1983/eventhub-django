from celery import shared_task
from django.core.management import call_command
from django.core.mail import send_mail
from django.utils import timezone
from datetime import timedelta
from .models import Event, Registration
from .models import User
from .organizer_dashboard import get_organizer_dashboard


@shared_task
def send_event_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    tomorrow = timezone.now() + timezone.timedelta(days=1)
    events = Event.objects.filter(
        date__date=tomorrow.date(), 
        is_active=True)
    
    for event in events:
        registrations = event.registrations.all()
        for registration in registrations:
            send_mail(
                f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.title}',
                f'''–ü—Ä–∏–≤–µ—Ç, {registration.user.username}!

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "{event.title}".
üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y –≤ %H:%M')}
üìç –ú–µ—Å—Ç–æ: {event.location}

–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!''',
                'noreply@eventhub.com',
                [registration.user.email],
                fail_silently=True,
            )


@shared_task
def sync_external_events():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""    
    call_command('sync_external_events')

@shared_task  
def archive_old_events():
    """–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    call_command('sync_external_events', '--archive-old')


@shared_task
def reset_daily_quests():
    """–°–±—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    from .gamification.core import gamification_engine
    from .models import Quest, UserQuest
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    Quest.objects.filter(quest_type='daily').delete()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    gamification_engine.create_daily_quests()
    
    print("Daily quests reset successfully")

@shared_task
def update_leaderboard():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    from .gamification.core import gamification_engine
    from .models import UserProfile
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    profiles = UserProfile.objects.all()
    for profile in profiles:
        profile.update_stats()
    
    print("Leaderboard updated successfully")

@shared_task
def award_streak_bonus():
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Å–µ—Ä–∏–∏"""
    from .models import UserProfile
    from .gamification.core import gamification_engine
    
    profiles = UserProfile.objects.filter(streak_days__gt=0)
    
    for profile in profiles:
        # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –∑–∞ —Å–µ—Ä–∏—é
        if profile.streak_days >= 7:
            gamification_engine.award_points(
                profile.user,
                points=25,
                reason=f"–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –∏–∑ {profile.streak_days} –¥–Ω–µ–π"
            )
        elif profile.streak_days >= 30:
            gamification_engine.award_points(
                profile.user,
                points=100,
                reason=f"–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –∏–∑ {profile.streak_days} –¥–Ω–µ–π"
            )
    
    print("Streak bonuses awarded")

@shared_task
def check_achievement_progress():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    from django.contrib.auth import get_user_model
    from .gamification.core import gamification_engine
    
    User = get_user_model()
    users = User.objects.all()
    
    for user in users:
        gamification_engine.handle_user_action(user, 'progress_check')
    
    print("Achievement progress checked for all users")


@shared_task
def send_weekly_organizer_reports():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤—Å–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º"""
    organizers = User.objects.filter(role='organizer')
    
    for organizer in organizers:
        try:
            dashboard = get_organizer_dashboard(organizer)
            success = dashboard.send_weekly_report()
            
            if success:
                print(f"Weekly report sent to {organizer.email}")
            else:
                print(f"Failed to send weekly report to {organizer.email}")
                
        except Exception as e:
            print(f"Error sending report to {organizer.email}: {e}")
            continue

@shared_task
def check_organizer_performance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    from datetime import timedelta
    
    organizers = User.objects.filter(role='organizer')
    warning_threshold = timezone.now() - timedelta(days=30)
    
    for organizer in organizers:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            recent_events = organizer.organized_events.filter(
                created_at__gte=warning_threshold
            )
            
            if recent_events.count() == 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                send_mail(
                    '‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω',
                    f'''–ü—Ä–∏–≤–µ—Ç, {organizer.username}!

–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π. 
–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!

–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è: http://127.0.0.1:8000/event/new/

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ EventHub''',
                    'noreply@eventhub.com',
                    [organizer.email],
                    fail_silently=True
                )
                
        except Exception as e:
            print(f"Error checking performance for {organizer.username}: {e}")

@shared_task
def update_organizer_rankings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Ä–∞–Ω–≥–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤"""
    organizers = User.objects.filter(role='organizer')
    
    for organizer in organizers:
        try:
            dashboard = get_organizer_dashboard(organizer)
            stats = dashboard.get_dashboard_stats(90)  # –ó–∞ 3 –º–µ—Å—è—Ü–∞
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
            rank_score = (
                stats['total_events'] * 10 +
                stats['total_registrations'] * 5 +
                stats['avg_rating'] * 20 +
                stats['engagement_metrics']['engagement_score']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–Ω–≥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ)
            if hasattr(organizer, 'organizer_rank'):
                organizer.organizer_rank = rank_score
                organizer.save()
                
        except Exception as e:
            print(f"Error updating rank for {organizer.username}: {e}")

@shared_task
def send_weekly_report():
    for organizer in User.objects.filter(role='organizer'):
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
        send_mail(...)