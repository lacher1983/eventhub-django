from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone
from .telegram_bot import TelegramNotifier
import logging

logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self):
        self.telegram_notifier = TelegramNotifier()

    def send_event_notification(self, user, event, notification_type, context=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
        context = context or {}
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self._send_email_notification(user, event, notification_type, context)
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        self._send_telegram_notification(user, event, notification_type, context)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self._create_internal_notification(user, event, notification_type)
    
    def _send_email_notification(self, user, event, notification_type, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            subject_map = {
                'registration': f'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ {event.title}',
                'reminder': f'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.title} —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è',
                'cancellation': f'‚ùå –û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event.title}',
                'new_event': f'üéâ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}',
                'registration_confirmed': f'üé´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {event.title}'
            }
            
            template_map = {
                'registration': 'events/emails/registration_confirmation.html',
                'reminder': 'events/emails/event_reminder.html',
                'cancellation': 'events/emails/event_cancellation.html',
                'new_event': 'events/emails/new_event_notification.html',
                'registration_confirmed': 'events/emails/registration_confirmed.html'
            }
            
            subject = subject_map.get(notification_type, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ EventHub')
            template = template_map.get(notification_type, 'events/emails/notification.html')
            
            context.update({
                'user': user,
                'event': event,
                'type': notification_type,
                'site_url': getattr(settings, 'SITE_URL', 'http://127.0.0.1:8000')
            })
            
            html_message = render_to_string(template, context)
            plain_message = f"{subject}\n\n{event.title}\n{event.date.strftime('%d.%m.%Y %H:%M')}\n{event.location}"
            
            send_mail(
                subject,
                plain_message,
                settings.DEFAULT_FROM_EMAIL,
                [user.email],
                html_message=html_message,
                fail_silently=False,
            )
            
            logger.info(f"Email notification sent to {user.email} for {notification_type}")
            
        except Exception as e:
            logger.error(f"Failed to send email notification: {e}")
    
    def _send_telegram_notification(self, user, event, notification_type, context):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            message_templates = {
                'registration': f'üéüÔ∏è –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n{event.title}',
                'reminder': f'‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.title} —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!',
                'new_event': f'üöÄ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n{event.title}',
            }
            
            message = message_templates.get(notification_type)
            if message:
                self.telegram_notifier.send_notification(message, event)
                
        except Exception as e:
            logger.error(f"Failed to send Telegram notification: {e}")
    
    def _create_internal_notification(self, user, event, notification_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            from .models import Notification
            Notification.objects.create(
                user=user,
                event=event,
                message=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_type}"
            )
        except Exception as e:
            logger.error(f"Failed to create internal notification: {e}")
    
    def send_bulk_notifications(self, users, event, notification_type):
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        for user in users:
            self.send_event_notification(user, event, notification_type)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService()