import os
import django
import datetime
from django.utils import timezone
from django.core.files import File
from PIL import Image, ImageDraw, ImageFont
import io
import sys

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(PROJECT_ROOT)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from events.models import Event, Category
from django.contrib.auth import get_user_model

User = get_user_model()

def create_thematic_image(width=400, height=300, theme='default', title='Event', emoji='üéâ'):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
        color_schemes = {
            'ai': {'bg_color': '#1a1a2e', 'gradient_start': '#16213e', 'gradient_end': '#0f3460', 'text_color': '#e94560', 'accent': '#f5f5f5'},
            'python': {'bg_color': '#2b5b84', 'gradient_start': '#306998', 'gradient_end': '#ffd43b', 'text_color': '#ffffff', 'accent': '#ffd43b'},
            'startup': {'bg_color': '#0c4b33', 'gradient_start': '#0c4b33', 'gradient_end': '#28a745', 'text_color': '#ffffff', 'accent': '#ffc107'},
            'art': {'bg_color': '#6a0dad', 'gradient_start': '#8a2be2', 'gradient_end': '#da70d6', 'text_color': '#ffffff', 'accent': '#ffeb3b'},
            'health': {'bg_color': '#1b5e20', 'gradient_start': '#2e7d32', 'gradient_end': '#4caf50', 'text_color': '#ffffff', 'accent': '#c8e6c9'},
            'food': {'bg_color': '#e65100', 'gradient_start': '#ff6f00', 'gradient_end': '#ff9800', 'text_color': '#ffffff', 'accent': '#ffe0b2'},
            'music': {'bg_color': '#01579b', 'gradient_start': '#0277bd', 'gradient_end': '#4fc3f7', 'text_color': '#ffffff', 'accent': '#e1f5fe'},
            'career': {'bg_color': '#37474f', 'gradient_start': '#455a64', 'gradient_end': '#78909c', 'text_color': '#ffffff', 'accent': '#cfd8dc'},
            'charity': {'bg_color': '#b71c1c', 'gradient_start': '#c62828', 'gradient_end': '#ef5350', 'text_color': '#ffffff', 'accent': '#ffcdd2'},
            'networking': {'bg_color': '#004d40', 'gradient_start': '#00695c', 'gradient_end': '#009688', 'text_color': '#ffffff', 'accent': '#b2dfdb'},
            'default': {'bg_color': '#667eea', 'gradient_start': '#667eea', 'gradient_end': '#764ba2', 'text_color': '#ffffff', 'accent': '#ffffff'}
        }
        
        scheme = color_schemes.get(theme, color_schemes['default'])

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (width, height), color=scheme['bg_color'])
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            ratio = i / height
            r1, g1, b1 = [int(c, 16) for c in (scheme['gradient_start'][1:3], scheme['gradient_start'][3:5], scheme['gradient_start'][5:7])]
            r2, g2, b2 = [int(c, 16) for c in (scheme['gradient_end'][1:3], scheme['gradient_end'][3:5], scheme['gradient_end'][5:7])]
            
            r = int(r1 + (r2 - r1) * ratio)
            g = int(g1 + (g2 - g1) * ratio)
            b = int(b1 + (b2 - b1) * ratio)
            
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        if theme == 'ai':
            # –ù–µ–π—Ä–æ—Å–µ—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∫–∞–∫ –Ω–µ–π—Ä–æ–Ω—ã
            for _ in range(50):
                x = np.random.randint(0, width)
                y = np.random.randint(0, height)
                size = np.random.randint(1, 4)
                draw.ellipse([x, y, x+size, y+size], fill=scheme['accent'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–æ–π —ç–º–æ–¥–∑–∏
        try:
            font_large = ImageFont.truetype("arial.ttf", 80)
            bbox = draw.textbbox((0, 0), emoji, font=font_large)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            x = (width - text_width) / 2
            y = (height - text_height) / 3
            draw.text((x, y), emoji, fill=scheme['accent'], font=font_large)
        except:
            # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏
            pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        try:
            font_title = ImageFont.truetype("arial.ttf", 20)
            # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            words = title.split()
            lines = []
            current_line = []
            
            for word in words:
                test_line = ' '.join(current_line + [word])
                bbox = draw.textbbox((0, 0), test_line, font=font_title)
                test_width = bbox[2] - bbox[0]
                
                if test_width <= width - 40:  # 20px padding —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                    current_line.append(word)
                else:
                    lines.append(' '.join(current_line))
                    current_line = [word]
            
            if current_line:
                lines.append(' '.join(current_line))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            lines = lines[:2]
            
            # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏
            line_height = 25
            total_height = len(lines) * line_height
            start_y = height - total_height - 60
            
            for i, line in enumerate(lines):
                bbox = draw.textbbox((0, 0), line, font=font_title)
                line_width = bbox[2] - bbox[0]
                x = (width - line_width) / 2
                y = start_y + i * line_height
                draw.text((x, y), line, fill=scheme['text_color'], font=font_title)
                
        except:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            title_short = title[:20] + '...' if len(title) > 20 else title
            draw.text((50, height - 80), title_short, fill=scheme['text_color'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ª–∏–Ω–∏—é
        draw.line([(50, height - 40), (width - 50, height - 40)], fill=scheme['accent'], width=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        img_io = io.BytesIO()
        img.save(img_io, format='JPEG', quality=95)
        img_io.seek(0)
        return File(img_io, name=f'{theme}_{title[:10].lower().replace(" ", "_")}.jpg')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–º—ã {theme}: {e}")
        return None

# def create_sample_image(width=300, height=200, color='blue', text='Event'):
#     try:
#         # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#         img = Image.new('RGB', (width, height), color=color)
        
#         # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
#         from PIL import ImageDraw, ImageFont
#         try:
#             draw = ImageDraw.Draw(img)
#             # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
#             try:
#                 font = ImageFont.truetype("arial.ttf", 20)
#             except:
#                 font = ImageFont.load_default()
            
#             # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
#             bbox = draw.textbbox((0, 0), text, font=font)
#             text_width = bbox[2] - bbox[0]
#             text_height = bbox[3] - bbox[1]
#             x = (width - text_width) / 2
#             y = (height - text_height) / 2
            
#             draw.text((x, y), text, fill='white', font=font)
#         except:
#             pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç - –Ω—É –∏ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
#         img_io = io.BytesIO()
#         img.save(img_io, format='JPEG', quality=85)
#         img_io.seek(0)
#         return File(img_io, name=f'{text.lower().replace(" ", "_")}.jpg')
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#         return None

def create_events():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            admin_user = User.objects.get(username='admin')
        except User.DoesNotExist:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'admin' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
            print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py createsuperuser --username admin")
            return
    
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = {}
        for cat_data in [
            {'name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'slug': 'technology', 'emoji': 'üíª', 'color': '#667eea'},
            {'name': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'slug': 'education', 'emoji': 'üìö', 'color': '#4facfe'},
            {'name': '–ë–∏–∑–Ω–µ—Å', 'slug': 'business', 'emoji': 'üíº', 'color': '#43e97b'},
            {'name': '–ò—Å–∫—É—Å—Å—Ç–≤–æ', 'slug': 'art', 'emoji': 'üé®', 'color': '#fa709a'},
            {'name': '–°–ø–æ—Ä—Ç', 'slug': 'sports', 'emoji': '‚öΩ', 'color': '#a3bded'},
            {'name': '–ú—É–∑—ã–∫–∞', 'slug': 'music', 'emoji': 'üéµ', 'color': '#f6d365'},
            {'name': '–ï–¥–∞', 'slug': 'food', 'emoji': 'üçï', 'color': '#ffecd2'},
            {'name': '–ó–¥–æ—Ä–æ–≤—å–µ', 'slug': 'health', 'emoji': 'üíä', 'color': '#84fab0'},
        ]:
            category, created = Category.objects.get_or_create(
                name=cat_data['name'],
                slug=cat_data['slug'],
                defaults={'description': f'{cat_data["name"]} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'}
            )
            categories[cat_data['slug']] = category
        
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏
        tags = {}
        tag_data = [
            'python', 'ai', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–≤–µ–±–∏–Ω–∞—Ä', '–≤–æ—Ä–∫—à–æ–ø', 
            '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '—Å—Ç–∞—Ä—Ç–∞–ø—ã', '–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥', '–æ–Ω–ª–∞–π–Ω', '–æ—Ñ—Ñ–ª–∞–π–Ω'
        ]
        
        for tag_name in tag_data:
            tag, created = Tag.objects.get_or_create(
                name=tag_name,
                defaults={'slug': tag_name, 'color': '#007bff'}
            )
            tags[tag_name] = tag
        
        print("‚úÖ –¢–µ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã")

        # 10 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        demo_events = [
            {
                'title': 'AI Conference 2025 - –ë—É–¥—É—â–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
                'short_description': '–ö—Ä—É–ø–Ω–µ–π—à–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –≤ –†–æ—Å—Å–∏–∏',
                'description': """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≤–µ–¥—É—â–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞–º –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ —Å–∞–º–æ–π –º–∞—Å—à—Ç–∞–±–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –≥–æ–¥–∞!""",
                'date': timezone.now() + datetime.timedelta(days=10),
                'location': '–ú–æ—Å–∫–≤–∞, –ö—Ä–æ–∫—É—Å –°–∏—Ç–∏ –•–æ–ª–ª',
                'category_slug': 'technology',
                'event_type': 'conference',
                'event_format': 'offline',
                'price': 5000,
                'capacity': 1000,
                'theme': 'ai',
                'emoji': 'ü§ñ',
                'tags': ['ai', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è']
            },
            {
                'title': 'Python Mastery: –û—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞',
                'short_description': '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ Python —Å –Ω—É–ª—è –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è',
                'description': """–û—Å–≤–æ–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –æ–ø—ã—Ç–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤!""",
                'date': timezone.now() + datetime.timedelta(days=5),
                'location': '–û–Ω–ª–∞–π–Ω (Zoom + Discord)',
                'category_slug': 'education',
                'event_type': 'course',
                'event_format': 'online',
                'price': 15000,
                'capacity': 50,
                'theme': 'python',
                'emoji': 'üêç',
                'tags': ['python', '–≤–µ–±–∏–Ω–∞—Ä', '–æ–Ω–ª–∞–π–Ω']
            },
            {
                'title': '–°—Ç–∞—Ä—Ç–∞–ø –£–∏–∫–µ–Ω–¥: –û—Ç –∏–¥–µ–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç—É',
                'short_description': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–æ—Ä–∫—à–æ–ø –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏ –∑–∞–ø—É—Å–∫—É —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
                'description': """–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é –≤ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –±–∏–∑–Ω–µ—Å –∑–∞ –æ–¥–∏–Ω —É–∏–∫–µ–Ω–¥!""",
                'date': timezone.now() + datetime.timedelta(days=15),
                'location': '–ú–æ—Å–∫–≤–∞, –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ "–¢–æ—á–∫–∞ –∫–∏–ø–µ–Ω–∏—è"',
                'category_slug': 'business',
                'event_type': 'workshop',
                'event_format': 'offline',
                'price': 3000,
                'capacity': 100,
                'theme': 'startup',
                'emoji': 'üöÄ',
                'tags': ['—Å—Ç–∞—Ä—Ç–∞–ø—ã', '–≤–æ—Ä–∫—à–æ–ø', '–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥']
            },
            {
                'title': '–í—ã—Å—Ç–∞–≤–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ "–ê–≤–∞–Ω–≥–∞—Ä–¥ 2025"',
                'short_description': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –≤—ã—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç –º–æ–ª–æ–¥—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤',
                'description': """–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –Ω–∞ —Å–∞–º–æ–π –æ–∂–∏–¥–∞–µ–º–æ–π –≤—ã—Å—Ç–∞–≤–∫–µ —Å–µ–∑–æ–Ω–∞!""",
                'date': timezone.now() + datetime.timedelta(days=20),
                'location': '–ú–æ—Å–∫–≤–∞, –¶–µ–Ω—Ç—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ "–í–∏–Ω–∑–∞–≤–æ–¥"',
                'category_slug': 'art',
                'event_type': 'exhibition_culture',
                'event_format': 'offline',
                'price': 500,
                'capacity': 500,
                'theme': 'art',
                'emoji': 'üé®',
                'tags': ['–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–≤—ã—Å—Ç–∞–≤–∫–∞', '–æ—Ñ—Ñ–ª–∞–π–Ω']
            },
            {
                'title': '–ú–∞—Ä–∞—Ñ–æ–Ω –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏',
                'short_description': '21-–¥–Ω–µ–≤–Ω—ã–π –æ–Ω–ª–∞–π–Ω-–º–∞—Ä–∞—Ñ–æ–Ω –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫',
                'description': """–ü—Ä–µ–æ–±—Ä–∞–∑–∏—Ç–µ —Å–≤–æ–µ —Ç–µ–ª–æ –∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –∑–∞ 21 –¥–µ–Ω—å –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤!""",
                'date': timezone.now() + datetime.timedelta(days=3),
                'location': '–û–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
                'category_slug': 'health',
                'event_type': 'training',
                'event_format': 'online',
                'price': 2500,
                'capacity': 200,
                'theme': 'health',
                'emoji': 'üí™',
                'tags': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–æ–Ω–ª–∞–π–Ω', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏']
            },
            {
                'title': '–§–µ—Å—Ç–∏–≤–∞–ª—å —É–ª–∏—á–Ω–æ–π –µ–¥—ã "Food Truck Battle"',
                'short_description': '–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–ª–∏—á–Ω–æ–π –µ–¥—ã —Å —É—á–∞—Å—Ç–∏–µ–º –ª—É—á—à–∏—Ö —Ñ—É–¥—Ç—Ä–∞–∫–æ–≤ –≥–æ—Ä–æ–¥–∞',
                'description': """–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π –Ω–∞ —Å–∞–º–æ–º –≤–∫—É—Å–Ω–æ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ –ª–µ—Ç–∞!""",
                'date': timezone.now() + datetime.timedelta(days=25),
                'location': '–ú–æ—Å–∫–≤–∞, –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ',
                'category_slug': 'food',
                'event_type': 'festival',
                'event_format': 'offline',
                'price': 0,
                'capacity': 5000,
                'theme': 'food',
                'emoji': 'üçï',
                'tags': ['–µ–¥–∞', '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ']
            },
            {
                'title': '–ö–æ–Ω—Ü–µ—Ä—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏ –≤ –ø–ª–∞–Ω–µ—Ç–∞—Ä–∏–∏',
                'short_description': '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —à–æ—É –ø–æ–¥ –∫—É–ø–æ–ª–æ–º –ø–ª–∞–Ω–µ—Ç–∞—Ä–∏—è',
                'description': """–ò—Å–ø—ã—Ç–∞–π—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏ –æ—Ç —Å–∏–Ω—Ç–µ–∑–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏ –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!""",
                'date': timezone.now() + datetime.timedelta(days=30),
                'location': '–ú–æ—Å–∫–≤–∞, –ü–ª–∞–Ω–µ—Ç–∞—Ä–∏–π',
                'category_slug': 'music',
                'event_type': 'concert',
                'event_format': 'offline',
                'price': 2000,
                'capacity': 300,
                'theme': 'music',
                'emoji': 'üéµ',
                'tags': ['–º—É–∑—ã–∫–∞', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–∏—Å–∫—É—Å—Å—Ç–≤–æ']
            },
            {
                'title': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä: –ö–∞—Ä—å–µ—Ä–∞ –≤ IT 2025',
                'short_description': '–ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –∫–∞—Ä—å–µ—Ä—É –≤ IT –≤ 2025 –≥–æ–¥—É - —Ç—Ä–µ–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
                'description': """–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –±—É–¥—É—Ç –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –≤ IT –≤ 2025 –≥–æ–¥—É –∏ –∫–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–∏–º —É–∂–µ —Å–µ–π—á–∞—Å!""",
                'date': timezone.now() + datetime.timedelta(days=2),
                'location': '–û–Ω–ª–∞–π–Ω (YouTube —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è)',
                'category_slug': 'education',
                'event_type': 'webinar',
                'event_format': 'online',
                'price': 0,
                'capacity': 1000,
                'theme': 'career',
                'emoji': 'üíº',
                'tags': ['–∫–∞—Ä—å–µ—Ä–∞', '–≤–µ–±–∏–Ω–∞—Ä', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ']
            },
            {
                'title': '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–±–µ–≥ "–ë–µ–∂–∏–º –æ—Ç —Ä–∞–∫–∞"',
                'short_description': '–ï–∂–µ–≥–æ–¥–Ω—ã–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–±–µ–≥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –±–æ–ª—å–Ω—ã—Ö',
                'description': """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –∑–∞–±–µ–≥—É –∏ –ø–æ–º–æ–≥–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –±–æ–ª—å–Ω—ã—Ö!""",
                'date': timezone.now() + datetime.timedelta(days=35),
                'location': '–ú–æ—Å–∫–≤–∞, –ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã',
                'category_slug': 'sports',
                'event_type': 'sport_event',
                'event_format': 'offline',
                'price': 1000,
                'capacity': 2000,
                'theme': 'charity',
                'emoji': '‚ù§Ô∏è',
                'tags': ['–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Å–ø–æ—Ä—Ç', '–∑–∞–±–µ–≥']
            },
            {
                'title': '–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ –¥–ª—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ "Tech Connect"',
                'short_description': '–í–µ—á–µ—Ä –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏ IT-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
                'description': """–†–∞—Å—à–∏—Ä—å—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–º–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–µ –≥–æ—Ä–æ–¥–∞!""",
                'date': timezone.now() + datetime.timedelta(days=7),
                'location': '–ú–æ—Å–∫–≤–∞, –õ–æ—Ñ—Ç "–ë–ª–∞–≥–æ–¥–∞—Ç—å"',
                'category_slug': 'business',
                'event_type': 'networking',
                'event_format': 'offline',
                'price': 1500,
                'capacity': 150,
                'theme': 'networking',
                'emoji': 'ü§ù',
                'tags': ['–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥', 'it', '–æ—Ñ—Ñ–ª–∞–π–Ω']
            }
        ]
        
        created_count = 0
        for event_data in demo_events:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            if not Event.objects.filter(title=event_data['title']).exists():
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ slug
                category_slug = event_data['category_slug']
                if category_slug in categories:
                    category_obj = categories[category_slug]
                else:
                    print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_slug} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                event_image = create_thematic_image(
                    theme=event_data['theme'],
                    title=event_data['title'],
                    emoji=event_data['emoji']
                )
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                event = Event.objects.create(
                    title=event_data['title'],
                    short_description=event_data['short_description'],
                    description=event_data['description'],
                    date=event_data['date'],
                    location=event_data['location'],
                    category=category_obj,
                    event_type=event_data['event_type'],
                    event_format=event_data['event_format'],
                    price=event_data['price'],
                    capacity=event_data['capacity'],
                    organizer=admin_user,
                    is_active=True
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if event_image:
                    event.image.save(f"{event_data['theme']}_{event_data['title'][:10].lower().replace(' ', '_')}.jpg", event_image)
                    print(f"üé® –°–æ–∑–¥–∞–Ω–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: {event_data['title']}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
                for tag_name in event_data['tags']:
                    if tag_name in tags:
                        event.tags.add(tags[tag_name])
                
                event.save()
                created_count += 1
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_data['title']}")
            else:
                print(f"‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {event_data['title']}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üéâ –î–ï–ú–û-–ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø –° –¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ú–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò –°–û–ó–î–ê–ù–´!")
        print("="*60)
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {created_count}/10")
        print(f"üé® –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {created_count}")
        print(f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {Category.objects.count()}")
        print(f"üè∑Ô∏è –¢–µ–≥–æ–≤: {Tag.objects.count()}")
        print("="*60)
        print("üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: http://127.0.0.1:8000/")
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    print("‚è≥ –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...")
    create_events()

