# import re
# import json
# import logging
# from datetime import datetime, timedelta
# from typing import Dict, List, Any, Optional
# import spacy
# from django.apps import apps

# logger = logging.getLogger(__name__)

# class EventHubChatBot:
#     """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —á–∞—Ç–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    
#     def __init__(self):
#         self.nlp = None
#         self.load_nlp_model()
        
#     def load_nlp_model(self):
#         """–ó–∞–≥—Ä—É–∑–∫–∞ NLP –º–æ–¥–µ–ª–∏"""
#         try:
#             self.nlp = spacy.load("ru_core_news_sm")
#             logger.info("SpaCy model loaded successfully")
#         except OSError:
#             logger.warning("SpaCy model not found. Using simple text processing.")
#             self.nlp = None
    
#     def process_message(self, message: str, user=None, session_id: str = None) -> Dict[str, Any]:
#         """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
#         try:
#             # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–Ω—Ç–∞
#             intent = self.detect_intent(message)
            
#             # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
#             entities = self.extract_entities(message)
            
#             # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞
#             response_data = self.handle_intent(intent, entities, user)
            
#             return {
#                 'response': response_data['response'],
#                 'intent': intent,
#                 'suggestions': response_data.get('suggestions', []),
#                 'events': response_data.get('events', []),
#                 'entities': entities,
#                 'session_id': session_id
#             }
            
#         except Exception as e:
#             logger.error(f"Error processing message: {e}")
#             return {
#                 'response': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
#                 'intent': 'error',
#                 'suggestions': ['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', '–ü–æ–º–æ—â—å'],
#                 'events': [],
#                 'session_id': session_id
#             }
    
#     def detect_intent(self, message: str) -> str:
#         """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#         message_lower = message.lower()
        
#         intent_patterns = {
#             'greeting': ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', '–¥–æ–±—Ä—ã–π', '–∑–¥–æ—Ä–æ–≤–æ'],
#             'search_events': ['–Ω–∞–π–¥–∏', '–∏—â–∏', '–ø–æ–∏—Å–∫', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '—Å–æ–±—ã—Ç–∏—è', '–∏–≤–µ–Ω—Ç—ã', '–∫–æ–Ω—Ü–µ—Ä—Ç', '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å'],
#             'free_events': ['–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', 'free', '–¥–∞—Ä–æ–º'],
#             'help': ['–ø–æ–º–æ—â—å', 'help', '—É–º–µ–µ—à—å', '–º–æ–∂–µ—à—å', '—Ñ—É–Ω–∫—Ü–∏–∏'],
#             'today_events': ['—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '–≤ —ç—Ç–æ—Ç –¥–µ–Ω—å'],
#             'weekend_events': ['–≤—ã—Ö–æ–¥–Ω—ã–µ', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '—É–∏–∫–µ–Ω–¥'],
#             'location_events': ['–º–æ—Å–∫–≤', '–ø–∏—Ç–µ—Ä', '—Å–ø–±', 'online', '–æ–Ω–ª–∞–π–Ω'],
#             'event_types': ['–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–≤—ã—Å—Ç–∞–≤–∫', '–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', '–≤–µ–±–∏–Ω–∞—Ä', '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å']
#         }
        
#         for intent, patterns in intent_patterns.items():
#             if any(pattern in message_lower for pattern in patterns):
#                 return intent
        
#         return 'unknown'
    
#     def extract_entities(self, message: str) -> Dict[str, Any]:
#         """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
#         entities = {
#             'event_type': None,
#             'location': None,
#             'date': None,
#             'price_range': None,
#             'category': None
#         }
        
#         # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ spaCy)
#         message_lower = message.lower()
        
#         # –¢–∏–ø—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
#         event_types = {
#             '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü': 'conference',
#             '–∫–æ–Ω—Ü–µ—Ä—Ç': 'concert', 
#             '–≤—ã—Å—Ç–∞–≤–∫': 'exhibition',
#             '–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å': 'masterclass',
#             '–≤–µ–±–∏–Ω–∞—Ä': 'webinar',
#             '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å': 'festival',
#             '–≤—Å—Ç—Ä–µ—á': 'meetup'
#         }
        
#         for pattern, event_type in event_types.items():
#             if pattern in message_lower:
#                 entities['event_type'] = event_type
#                 break
        
#         # –õ–æ–∫–∞—Ü–∏–∏
#         locations = {
#             '–º–æ—Å–∫–≤': '–ú–æ—Å–∫–≤–∞',
#             '–ø–∏—Ç–µ—Ä': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
#             '—Å–ø–±': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
#             '–æ–Ω–ª–∞–π–Ω': 'online',
#             'online': 'online'
#         }
        
#         for pattern, location in locations.items():
#             if pattern in message_lower:
#                 entities['location'] = location
#                 break
        
#         # –î–∞—Ç–∞
#         date_patterns = {
#             '—Å–µ–≥–æ–¥–Ω—è': datetime.now().date(),
#             '–∑–∞–≤—Ç—Ä–∞': (datetime.now() + timedelta(days=1)).date(),
#             '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': (datetime.now() + timedelta(days=2)).date(),
#             '–Ω–µ–¥–µ–ª': (datetime.now() + timedelta(days=7)).date()
#         }
        
#         for pattern, date in date_patterns.items():
#             if pattern in message_lower:
#                 entities['date'] = date.strftime('%Y-%m-%d')
#                 break
        
#         # –¶–µ–Ω–∞
#         if '–±–µ—Å–ø–ª–∞—Ç' in message_lower:
#             entities['price_range'] = 'free'
#         elif '–ø–ª–∞—Ç–Ω' in message_lower or '–±–∏–ª–µ—Ç' in message_lower:
#             entities['price_range'] = 'paid'
        
#         return entities
    
#     def handle_intent(self, intent: str, entities: Dict, user=None) -> Dict[str, Any]:
#         """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞"""
#         if intent == 'greeting':
#             return self.handle_greeting()
#         elif intent == 'search_events':
#             return self.handle_search_events(entities, user)
#         elif intent == 'free_events':
#             return self.handle_free_events(entities, user)
#         elif intent == 'help':
#             return self.handle_help()
#         elif intent == 'today_events':
#             return self.handle_today_events(entities, user)
#         else:
#             return self.handle_unknown()
    
#     def handle_greeting(self) -> Dict[str, Any]:
#         """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
#         return {
#             'response': "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ EventHub! ü§ñ\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
#             'suggestions': [
#                 "–ù–∞–π–¥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª–µ",
#                 "–ü–æ–∫–∞–∂–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", 
#                 "–ö–∞–∫–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –µ—Å—Ç—å?",
#                 "–ü–æ–º–æ—â—å"
#             ]
#         }
    
#     def handle_search_events(self, entities: Dict, user=None) -> Dict[str, Any]:
#         """–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
#         # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ë–î
#         # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        
#         events = self.search_events_in_db(entities)
        
#         if events:
#             response = f"üéØ –ù–∞—à–µ–ª –¥–ª—è –≤–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n\n"
#             for event in events[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
#                 response += f"‚Ä¢ {event['title']} ({event['date']})\n"
            
#             if len(events) > 3:
#                 response += f"\n... –∏ –µ—â–µ {len(events) - 3} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
#         else:
#             response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòî\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
        
#         return {
#             'response': response,
#             'events': events,
#             'suggestions': [
#                 "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
#                 "–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
#                 "–ö–æ–Ω—Ü–µ—Ä—Ç—ã –≤ –ú–æ—Å–∫–≤–µ"
#             ]
#         }
    
#     def handle_free_events(self, entities: Dict, user=None) -> Dict[str, Any]:
#         """–ü–æ–∏—Å–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
#         entities['price_range'] = 'free'
#         events = self.search_events_in_db(entities)
        
#         if events:
#             response = "üÜì –í–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
#             for event in events[:5]:
#                 price_info = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" if event['price'] == 0 else f"{event['price']}‚ÇΩ"
#                 response += f"‚Ä¢ {event['title']} - {price_info}\n"
#         else:
#             response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòî"
        
#         return {
#             'response': response,
#             'events': events,
#             'suggestions': [
#                 "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
#                 "–°–æ–±—ã—Ç–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ", 
#                 "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã"
#             ]
#         }
    
#     def handle_help(self) -> Dict[str, Any]:
#         """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º"""
#         response = """üõ†Ô∏è **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**

# üéØ **–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π** - –Ω–∞–π–¥—É —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –¥–∞—Ç–µ, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
# üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ** - –ø–æ–∫–∞–∂—É —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ  
# üí∞ **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è** - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ/–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
# üë• **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –ø–æ–¥–±–µ—Ä—É —Å–æ–±—ã—Ç–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
# üé´ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è** - –ø–æ–º–æ–≥—É —Å –±–∏–ª–µ—Ç–∞–º–∏

# **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
# ‚Ä¢ "–ù–∞–π–¥–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤ –ú–æ—Å–∫–≤–µ"
# ‚Ä¢ "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ?"
# ‚Ä¢ "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã"
# ‚Ä¢ "IT –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ" """
        
#         return {
#             'response': response,
#             'suggestions': [
#                 "–ù–∞–π–¥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
#                 "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
#                 "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?"
#             ]
#         }
    
#     def handle_today_events(self, entities: Dict, user=None) -> Dict[str, Any]:
#         """–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
#         entities['date'] = datetime.now().date().strftime('%Y-%m-%d')
#         events = self.search_events_in_db(entities)
        
#         if events:
#             response = "üìÖ **–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
#             for event in events:
#                 response += f"‚Ä¢ {event['title']} –≤ {event['location']}\n"
#         else:
#             response = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. –ú–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏? üìÜ"
        
#         return {
#             'response': response,
#             'events': events,
#             'suggestions': [
#                 "–ù–∞ –∑–∞–≤—Ç—Ä–∞",
#                 "–ù–∞ –Ω–µ–¥–µ–ª–µ",
#                 "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
#             ]
#         }
    
#     def handle_unknown(self) -> Dict[str, Any]:
#         """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
#         return {
#             'response': "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. ü§î\n\n–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–æ–∏—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö, –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!",
#             'suggestions': [
#                 "–ù–∞–π–¥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
#                 "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
#                 "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
#                 "–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è"
#             ]
#         }
    
#     def search_events_in_db(self, entities: Dict) -> List[Dict]:
#         """–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
#         # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª—è–º Event
#         # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        
#         sample_events = [
#             {
#                 'id': 1,
#                 'title': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è Future Tech',
#                 'date': '2024-09-25',
#                 'location': '–ú–æ—Å–∫–≤–∞',
#                 'price': 0,
#                 'type': 'conference',
#                 'description': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –æ –±—É–¥—É—â–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π'
#             },
#             {
#                 'id': 2, 
#                 'title': '–î–∂–∞–∑–æ–≤—ã–π –≤–µ—á–µ—Ä –≤ City Club',
#                 'date': '2024-09-28',
#                 'location': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
#                 'price': 1500,
#                 'type': 'concert',
#                 'description': '–í–µ—á–µ—Ä –∂–∏–≤–æ–π –¥–∂–∞–∑–æ–≤–æ–π –º—É–∑—ã–∫–∏'
#             },
#             {
#                 'id': 3,
#                 'title': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
#                 'date': '2024-09-26', 
#                 'location': '–û–Ω–ª–∞–π–Ω',
#                 'price': 0,
#                 'type': 'masterclass',
#                 'description': '–û–Ω–ª–∞–π–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ digital –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É'
#             }
#         ]
        
#         # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ)
#         filtered_events = []
        
#         for event in sample_events:
#             include = True
            
#             if entities.get('price_range') == 'free' and event['price'] > 0:
#                 include = False
#             if entities.get('location') and entities['location'].lower() not in event['location'].lower():
#                 include = False
#             if entities.get('event_type') and entities['event_type'] != event['type']:
#                 include = False
            
#             if include:
#                 filtered_events.append(event)
        
#         return filtered_events if filtered_events else sample_events[:1]  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ

# # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
# chatbot = EventHubChatBot()